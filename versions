#!/usr/bin/zsh

# This script poops out the versions of languages/tools which are currently installed.
# The languages here are all ones that I've messed around with at some point or another.

echo "Current Language Versions"
echo

iscmd() {
    command -v "$1" >/dev/null 2>&1
}

iscmd bun       && echo "bun        $(bun -v)  (rtx)"
iscmd crystal   && echo "Crystal    $(crystal version | head -1 | cut -d' ' -f2-)  (rtx)"
iscmd deno      && echo "deno       $(deno -V | cut -d' ' -f2)  (rtx)"
iscmd java      && echo "Java       $(java -version 2>&1 | head -1)"
iscmd julia     && echo "Julia      $(julia -v 2>&1 | cut -d' ' -f3)  (rtx)"
iscmd nim       && echo "nim        $(nim -v 2>&1 | head -1 | cut -d' ' -f4)  (rtx)"
iscmd node      && echo "Node.js    $(node -v 2>&1)  (rtx)"
iscmd perl      && echo "Perl       $(perl -e 'print $]')  (rtx)"
iscmd python    && echo "Python     $(python -V 2>&1 | cut -d' ' -f2)  (rtx)"
iscmd raku      && echo "raku       $(raku -v | head -1 | cut -d' ' -f4)  (rtx)"
iscmd ruby      && echo "Ruby       $(ruby -v 2>&1 | cut -d' ' -f2)  (rtx)"
iscmd rustc     && echo "rust       $(rustc --version | cut -d' ' -f2-)  (rtx)"
iscmd zig       && echo "zig        $(zig version)  (rtx)"

[ -z "$1" ] && exit 0

echo "-- more --"
iscmd bash      && echo "Bash       $(bash --version | head -1)"
iscmd bigloo    && echo "Bigloo     $(bigloo -version)"
iscmd ceylon    && echo "Ceylon     $(ceylon -v)"
iscmd csc       && echo "Chicken    $(csc -version | grep Version)"
iscmd clang     && echo "clang/LLVM $(clang --version | head -1)"
iscmd ccl       && echo "Clozure    $(ccl --version)"
iscmd clisp     && echo "CLISP      $(clisp --version | head -1)"
iscmd elixir    && echo "Elixir     $(elixir -v | tail -1 | cut -d' ' -f2 )"
if iscmd erl
then
    ever=$(erl -version 2>&1 | tr -d "\r\n" | cut -c8-)
    over=$(erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().' -noshell | tr -d '\"\r\n')
    echo "Erlang    $ever (OTP $over)  (rtx)"
    #echo "Erlang    $(erl -version 2>&1)"
    #echo "          OTP version $(erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().' -noshell | tr -d '\"')"
    echo "          $(which erl)"
    echo "          Use kerl to manage multiple versions."
    [ -z "$1" ] && echo
fi
iscmd fan       && echo "Fantom     $(fan -version | grep fan.version | tr -d ' ' | cut -d: -f2)"
iscmd frink     && echo "Frink      $(frink -v 2>&1)"
iscmd fsharpc   && echo "F#         $(fsharpc --help | head -1)"
iscmd gsi       && echo "Gambit-C   $(gsi -v | cut -d' ' -f1-3)"
iscmd gosh      && echo "Gauche     $(gosh -V)"
iscmd gawk      && echo "gawk       $(gawk --version | head -1)"
iscmd gcc       && echo "gcc        $(gcc --version | head -1)"
iscmd ghc       && echo "GHC        $(ghc --version)"
iscmd go        && echo "Go         $(go version)"
iscmd groovy    && echo "Groovy     $(groovy --version)"
iscmd guile     && echo "guile      $(guile -v | head -1)"
iscmd hackersh  && echo "hackersh   $(hackersh -V 2>&1)"
iscmd haxe      && echo "haxe       $(haxe -version 2>&1)"
iscmd kotlinc   && echo "Kotlin     $(kotlinc -version 2>&1 | cut -b7-)"
iscmd lua       && echo "lua        $(lua -v)"
iscmd luajit    && echo "luajit     $(luajit -v)"
# last update to mirah is July 2012, looks dead...
iscmd mirah     && echo "mirah      $(mirah -v 2>&1 | head -1) [looks dead]"
# update with luarocks
iscmd moon      && echo "moonscript $(moon -v)"
iscmd neko      && echo "Neko       $(nekoc --help | head -1)"
iscmd nuitka    && echo "Nuitka     $(nuitka --version | head -1)"
if iscmd ocaml
then
    echo "Ocaml     $(ocaml -version 2>&1)   (rtx)"
    echo "          $(which ocaml)"
    [ -z "$1" ] && echo
fi
iscmd rock      && echo "ooc(rock)  $(rock -V)"
iscmd ponyc     && echo "pony       $(ponyc -v | head -1)  (ponyup)"
iscmd psc       && echo "PureScript $(psc --version)"
if iscmd pure
then
    echo "Pure      $(pure --version|head -1|cut -d' ' -f2-)  (rtx)"
    echo "          $(which pure)"
    [ -z "$1" ] && echo
fi
iscmd pythonect && echo "pythonect  $(pythonect -V 2>&1)"
iscmd racket    && echo "racket     $(racket -v)"
iscmd sbcl      && echo "SBCL       $(sbcl --version | cut -d' ' -f2)"
iscmd slsh      && echo "slsh       $(slsh --version)"
iscmd tclsh     && echo "tcl        $(echo 'puts $tcl_version' | tclsh)"
iscmd zsh       && echo "zsh        $(zsh --version)"

echo "-- package managers --"
iscmd corral    && echo "corral     $(corral version | cut -d' ' -f2)  (ponyup)"
iscmd npm       && echo "npm        $(npm version | grep npm | tr -d " '," | cut -d: -f2)  (comes with node so rtx)"
iscmd zigmod    && echo "zigmod     $(zigmod version | cut -d' ' -f2-)  (rtx)"

echo "-- language managers --"
iscmd asdf      && echo "asdf       $(asdf | head -1)"
iscmd boot      && echo "boot       $(boot -V | grep BOOT_VERSION | cut -d= -f2)  (boot -u) [Clojure]"
# install with $ wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
iscmd lein      && echo "lein       $(lein -v) [Clojure]  (lein upgrade) [Clojure]"
iscmd ponyup    && echo "ponyup     $(ponyup version)"
iscmd pyenv     && echo "pyenv      $(pyenv -v | cut -d' ' -f2)"
iscmd rtx       && echo "rtx        $(rtx version 2>/dev/null)  (rtx self-update)"
iscmd sbt       && echo "sbt        $(sbt about|grep --color=never "This is sbt"|cut -d' ' -f4-5) [Scala]"
iscmd sdk       && echo "sdk        $(sdk version | tr -d '\n'; echo)"
# echo "sdk    $(sdk version | tr -d '\n')"

echo "-- SCMs --"
iscmd bzr       && echo "bzr        $(bzr version | head -1)"
iscmd cvs       && echo "cvs        $(cvs --version | grep client)"
iscmd darcs     && echo "darcs      $(darcs --version)"
iscmd fossil    && echo "fossil     $(fossil version)"
iscmd git       && echo "git        $(git version)"
iscmd hg        && echo "hg         $(hg version | head -1)"
iscmd svn       && echo "svn        $(svn --version | head -1)"

echo "-- random tools --"
iscmd bat       && echo "bat        $(bat -V | cut -d' ' -f2-)  (dep-get install bat)"
iscmd tup       && echo "tup        $(tup -v)  (~/src/tup git pull; ./tup)"
iscmd pulsar    && echo "pulsar     $(pulsar -v | head -1 | cut -d: -f2 | tr -d ' ')  (dep-get install pulsar)"
echo
