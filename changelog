#!/usr/bin/env bash
# Script to open the releases pages or changelogs of applications in the default web browser
# 
# Usage Examples:
#   releases jujutsu    # Opens jujutsu releases page
#   changelog mise      # Opens mise changelog
#   releases python     # Opens python releases page
#
# The script determines which URL list to use based on the script name:
# - "releases" script name opens release pages
# - "changelog" script name opens changelog pages
#
# PERMANENT SCRIPT - Do not remove

set -o errexit
set -o nounset
set -o pipefail
if [[ "${TRACE-0}" == "1" ]]; then
    set -o xtrace
fi

# Error handling function
error_exit() {
    echo "Error: $1" >&2
    exit 1
}

# pick which list to use based on the script name
if [[ "$(basename "$0")" == "releases" ]]; then
    # Dictionary of application names and their releases URLs
    declare -A app_urls=(
        ["backlog.md"]="https://github.com/MrLesk/Backlog.md/releases"
        ["git-extras"]="https://github.com/tj/git-extras/releases"
        ["jenkins"]="https://github.com/jenkinsci/jenkins/releases"
        ["jujutsu"]="https://github.com/martinvonz/jj/releases"
        ["just"]="https://github.com/casey/just/releases"
        ["kitty"]="https://github.com/kovidgoyal/kitty/releases"
        ["mise"]="https://github.com/jdx/mise/releases"
        ["opencode"]="https://github.com/sst/opencode/releases"
        ["pony"]="https://github.com/ponylang/ponyc/releases"
        ["postgres"]="https://www.postgresql.org/docs/release"
        ["python"]="https://www.python.org/download/releases"
        ["ruff"]="https://github.com/astral-sh/ruff/releases"
        ["soar"]="https://github.com/pkgforge/soar/releases"
        ["uv"]="https://github.com/astral-sh/uv/releases"
        ["uv-migrator"]="https://github.com/stvnksslr/uv-migrator/releases"
        ["werk"]="https://github.com/simonask/werk"
        ["zig"]="https://github.com/ziglang/zig/releases"
        ["zls"]="https://github.com/zls/zls/releases"
    )
else
    # Dictionary of application names and their changelog URLs
    declare -A app_urls=(
        ["backlog.md"]="https://github.com/MrLesk/Backlog.md/releases"
        ["git-extras"]="https://github.com/tj/git-extras/blob/main/History.md"
        ["jenkins"]="https://www.jenkins.io/changelog"
        ["jujutsu"]="https://github.com/martinvonz/jj/blob/main/CHANGELOG.md"
        ["just"]="https://github.com/casey/just/blob/master/CHANGELOG.md"
        ["kitty"]="https://sw.kovidgoyal.net/kitty/changelog"
        ["mise"]="https://github.com/jdx/mise/blob/main/CHANGELOG.md"
        ["opencode"]="https://github.com/sst/opencode/releases"
        ["pony"]="https://github.com/ponylang/ponyc/blob/main/CHANGELOG.md"
        ["postgres"]="https://www.postgresql.org/docs/release"
        ["python"]="https://docs.python.org/3/whatsnew/changelog.html"
        ["ruff"]="https://github.com/astral-sh/ruff/blob/main/CHANGELOG.md"
        ["soar"]="https://github.com/pkgforge/soar/blob/main/CHANGELOG.md"
        ["uv"]="https://github.com/astral-sh/uv/blob/main/CHANGELOG.md"
        ["uv-migrator"]="https://github.com/stvnksslr/uv-migrator/blob/main/CHANGELOG.md"
        ["werk"]="https://github.com/simonask/werk"
        ["zig"]="https://ziglang.org/download"
        ["zls"]="https://zigtools.org/zls/releases"
    )
fi

# Input sanitization
if [[ $# -gt 1 ]]; then
    error_exit "Too many arguments. Usage: $0 <application_name>"
fi

# Check if an application name was provided as an argument
if [[ $# -eq 0 ]]; then
    echo "Usage: $0 <application_name>"
    echo "Available applications:"
    for app in $(printf '%s\n' "${!app_urls[@]}" | sort); do
        echo "  - $app"
    done
    exit 1
fi

app_name="$1"

# Sanitize input - only allow alphanumeric characters, hyphens, and underscores
if [[ ! "$app_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    error_exit "Invalid application name format. Only alphanumeric characters, hyphens, and underscores are allowed."
fi

# Check if the provided application name is valid
if [[ -n "${app_urls[$app_name]:-}" ]]; then
    url="${app_urls[$app_name]}"
    echo "Opening $(basename "$0") for $app_name: $url"
    
    # Check if xdg-open is available
    if ! command -v xdg-open >/dev/null 2>&1; then
        error_exit "xdg-open command not found. Please install xdg-utils or use a different browser."
    fi
    
    # Open URL and handle potential errors
    if ! xdg-open "$url" &>/dev/null; then
        error_exit "Failed to open URL: $url"
    fi
else
    echo "Invalid application name: $app_name" >&2
    echo "Available applications:"
    for app in $(printf '%s\n' "${!app_urls[@]}" | sort); do
        echo "  - $app"
    done
    exit 1
fi
