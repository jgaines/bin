#!/usr/bin/env bash

# update-all-repos - Update all git repositories in a directory tree
# PERMANENT SCRIPT: Recursively finds and updates git repositories
# Supports dry-run mode and handles repos on different branches

set -o errexit
set -o nounset
set -o pipefail
if [[ "${TRACE-0}" == "1" ]]; then
    set -o xtrace
fi

START_DIR=$(pwd)
GIT_ROOT="${GIT_ROOT:-$HOME/git}"
extra=0
dry_run=

for opt in "$@"
do
    case "$opt" in
        -n|--dry-run)
            dry_run=echo
            ;;
        -e|--extra)
            extra=1
            ;;
        -h|--help|-*)
            echo ""
            echo "Usage: $0 [options]"
            echo ""
            echo "Updates all git repos under \$GIT_ROOT (default: ~/git)."
            echo ""
            echo "Options:"
            echo "  -n|--dry-run   show commands that would be executed"
            echo "  -e|--extra     output extra info (show local changes)"
            echo "  -h|--help      show this help"
            echo ""
            echo "Environment Variables:"
            echo "  GIT_ROOT       directory to search for git repos (default: ~/git)"
            echo ""
            exit 0
            ;;
    esac
done

jujutsu=
clean=
changed=
branched=

# Validate that GIT_ROOT exists
if [[ ! -d "$GIT_ROOT" ]]; then
    echo "Error: Directory '$GIT_ROOT' does not exist." >&2
    echo "Set GIT_ROOT environment variable to a valid directory." >&2
    exit 1
fi

echo "Searching for jj repositories in: $GIT_ROOT"

for REPO in $(find "$GIT_ROOT" -name .jj -exec dirname {} \; 2>/dev/null); do
    echo "Checking $REPO"

    if ! cd "$REPO"; then
        echo "Error: Cannot access repository '$REPO'" >&2
        continue
    fi
    
    REMOTE=$(git remote -v)
    if [ -z "$REMOTE" ]; then
        echo "NO REMOTE: $REPO"
    else
        echo "JJ: $REPO"
        if [[ -n ${dry_run} ]]; then
            echo "Would run: jj git fetch"
        else
            jj git fetch
        fi
        jujutsu="$jujutsu:  $REPO"
    fi
done

echo "Searching for git repositories in: $GIT_ROOT"

for REPO in $(find "$GIT_ROOT" -name .git -exec dirname {} \; 2>/dev/null); do
    echo "Checking $REPO"

    if [ -d "$REPO/.jj" ]; then
        echo "Skipping co-located jujutsu repository: $REPO"
        continue
    fi
    
    if ! cd "$REPO"; then
        echo "Error: Cannot access repository '$REPO'" >&2
        continue
    fi
    
    REMOTE=$(git remote -v)
    if ! BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null); then
        echo "Error: Cannot determine branch for '$REPO'" >&2
        cd "$START_DIR"
        continue
    fi
    if [ -z "$REMOTE" ]; then
        echo "NO REMOTE: $REPO"
    else
        if [ "$BRANCH" = "master" ] || [ "$BRANCH" = "main" ]; then
            CHANGES=$(git status --porcelain | grep -v '??' || true)
            if [ -z "$CHANGES" ]; then
                echo "CLEAN: $REPO"
                if [[ -n ${dry_run} ]]; then
                    echo "Would run: git pull --rebase=merges || { git branch --set-upstream-to=origin/$BRANCH $BRANCH && git pull --rebase=merges; }"
                else
                    git pull --rebase=merges || { git branch --set-upstream-to=origin/"$BRANCH" "$BRANCH" && git pull --rebase=merges; }
                fi
                clean="$clean:  $REPO"
            else
                echo "CHANGES: $REPO"
                [ $extra -eq 1 ] && echo "$CHANGES"
                [ $extra -eq 1 ] && echo '------------------------------'
                if [[ -n ${dry_run} ]]; then
                    echo "Would run: git fetch || { git branch --set-upstream-to=origin/$BRANCH $BRANCH && git fetch; }"
                else
                    git fetch || { git branch --set-upstream-to=origin/"$BRANCH" "$BRANCH" && git fetch; }
                fi
                changed="$changed:  $REPO"
            fi
        else
            echo "BRANCHED: $REPO ($BRANCH)"
            if [[ -n ${dry_run} ]]; then
                echo "Would run: git fetch || { git branch --set-upstream-to=origin/$BRANCH $BRANCH && git fetch; }"
            else
                git fetch || { git branch --set-upstream-to=origin/"$BRANCH" "$BRANCH" && git fetch; }
            fi
            branched="$branched:  $REPO"
        fi
    fi
    
    if ! cd "$START_DIR"; then
        echo "Error: Cannot return to starting directory '$START_DIR'" >&2
        exit 1
    fi
done

if [ -z "$dry_run" ]; then
    pulled="updated"
    fetched="fetched"
else
    pulled="updatable"
    fetched="fetchable"
fi

echo '------------------------------'
echo "Clean ($pulled):$(echo "$clean" | tr ':' '\n')"
echo '------------------------------'
echo "Jujutsu ($fetched):$(echo "$jujutsu" | tr ':' '\n')"
echo '------------------------------'
echo "Modified ($fetched):$(echo "$changed" | tr ':' '\n')"
echo '------------------------------'
echo "Branched ($fetched):$(echo "$branched" | tr ':' '\n')"
